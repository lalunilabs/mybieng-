generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  RESEARCHER
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  image         String?
  role          UserRole      @default(USER)
  emailVerified DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  quizRuns      QuizRun[]
  quizSessions  QuizSession[]
  bookmarks     Bookmark[]
  likes         Like[]
  subscription  Subscription?
  articles      Article[]
  
  @@index([email])
  @@index([role])
}

enum QuizResultType {
  NUMERIC
  CATEGORICAL
  NARRATIVE
  HYBRID
}

model Quiz {
  id                   String         @id @default(cuid())
  slug                 String         @unique
  title                String
  description          String
  questions            Json           // Array of questions with their configurations
  resultType           QuizResultType @default(NUMERIC)
  resultProfiles       Json?          // For CATEGORICAL results
  resultBands          Json?          // For NUMERIC results
  timeLimitMinutes     Int?           // Optional time limit
  randomizeQuestions   Boolean        @default(false)
  keepFirstNQuestions  Int?           // Keep first N questions in place when randomizing
  allowSaveAndContinue Boolean        @default(true)
  showProgressBar      Boolean        @default(true)
  showQuestionNumbers  Boolean        @default(true)
  requiredAnswers      String         @default("all") // 'all', 'none', or number
  allowBackNavigation  Boolean        @default(true)
  showResultsImmediately Boolean      @default(true)
  allowRetake          Boolean        @default(true)
  published            Boolean        @default(false)
  publishedAt          DateTime?
  isPaid               Boolean        @default(false)
  price                Int?           // In cents
  metaTitle            String?
  metaDescription      String?
  keywords             String[]
  imageUrl             String?
  attachments          Json?          // Array of attachments
  estimatedTime        Int?           // In minutes
  benefits             String[]
  requirements         String[]
  scoringAlgorithm     String         @default("sum") // 'sum', 'weighted', 'custom'
  passPercentage       Int?           // 0-100
  showCorrectAnswers   Boolean        @default(false)
  showExplanations     String         @default("after_attempt") // 'always', 'after_attempt', 'never'
  redirectUrl          String?        // URL to redirect after completion
  webhookUrl           String?        // Webhook to call on completion
  trackAnalytics       Boolean        @default(true)
  requireEmail         Boolean        @default(false)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  
  sessions             QuizSession[]
  
  @@index([slug])
  @@index([published, publishedAt])
  @@index([isPaid, price])
}

model QuizSession {
  id             String      @id @default(cuid())
  userId         String?
  user           User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  quizId         String
  quiz           Quiz        @relation(fields: [quizId], references: [id])
  sessionId      String      @unique
  answers        Json        // Array of answers
  currentQuestion Int        @default(0)
  flaggedQuestions String[]   // Array of question IDs
  timeSpent      Int?        // Total time spent in seconds
  timeLeft       Int?        // Time left in seconds (for timed quizzes)
  isComplete     Boolean     @default(false)
  result         Json?       // Final result data
  metadata       Json?       // Additional metadata
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  completedAt    DateTime?
  
  @@index([sessionId])
  @@index([userId, quizId])
  @@index([quizId, isComplete])
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Article {
  id              String       @id @default(cuid())
  slug            String       @unique
  title           String
  excerpt         String?
  content         Json         // Rich text content
  coverImage      String?
  status          ArticleStatus @default(DRAFT)
  publishedAt     DateTime?
  authorId        String
  author          User         @relation(fields: [authorId], references: [id])
  isPaid          Boolean      @default(false)
  price           Int?         // In cents
  readingTime     Int?         // In minutes
  seoTitle        String?
  seoDescription  String?
  seoKeywords     String[]
  canonicalUrl    String?
  tags            String[]
  featured        Boolean      @default(false)
  viewCount       Int          @default(0)
  likes           Like[]
  bookmarks       Bookmark[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  @@index([slug])
  @@index([status, publishedAt])
  @@index([authorId])
  @@index([isPaid, price])
  @@index([featured])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId String?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  quizId    String?
  quiz      Quiz?    @relation(fields: [quizId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([userId, articleId, quizId])
  @@index([userId])
  @@index([articleId])
  @@index([quizId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId String?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  quizId    String?
  quiz      Quiz?    @relation(fields: [quizId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([userId, articleId, quizId])
  @@index([userId])
  @@index([articleId])
  @@index([quizId])
}

model Subscription {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan                    String   @default("premium")
  status                  String   @default("active") // 'active', 'canceled', 'past_due', 'unpaid'
  currentPeriodStart      DateTime
  currentPeriodEnd        DateTime
  cancelAtPeriodEnd       Boolean  @default(false)
  canceledAt              DateTime?
  latestInvoice           String?
  defaultPaymentMethod    String?
  trialStart              DateTime?
  trialEnd                DateTime?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  @@index([userId])
  @@index([status])
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  type      String   // Event type (e.g., 'page_view', 'quiz_started', 'quiz_completed', 'article_viewed')
  name      String   // Event name
  data      Json?    // Event-specific data
  url       String?  // URL where the event occurred
  referrer  String?  // Referrer URL
  ip        String?  // IP address (anonymized)
  userAgent String?  // User agent string
  userId    String?  // If user is logged in
  sessionId String?  // Anonymous session ID
  createdAt DateTime @default(now())
  
  @@index([type])
  @@index([name])
  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
}

model EmailLog {
  id              String   @id @default(cuid())
  userId          String?
  email           String
  type            String   // 'welcome', 'quiz_results', 'subscription', 'receipt', etc.
  subject         String
  status          String   // 'sent', 'delivered', 'opened', 'clicked', 'bounced', 'complained'
  messageId       String?
  error           String?
  metadata        Json?    // Additional metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([email])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([key])
}

model Newsletter {
  id            String   @id @default(cuid())
  email         String   @unique
  firstName     String?
  lastName      String?
  preferences   String?  // JSON preferences
  source        String?  // Where they signed up from
  leadMagnet    String?  // Which lead magnet they signed up for
  isActive      Boolean  @default(true)
  confirmedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  unsubscribedAt DateTime?
  
  @@index([email])
  @@index([isActive, createdAt(sort: Desc)])
}

model Feedback {
  id        String   @id @default(cuid())
  type      String   // 'bug', 'feature', 'general'
  message   String
  email     String?
  metadata  String?  // Browser info, page URL, etc. as JSON string
  status    String   @default("open") // 'open', 'in-progress', 'closed'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([type, status])
  @@index([createdAt(sort: Desc)])
}

model Analytics {
  id        String   @id @default(cuid())
  event     String   // Event name
  data      String?  // Event data as JSON string
  sessionId String?
  userId    String?
  createdAt DateTime @default(now())
  
  @@index([event, createdAt(sort: Desc)])
  @@index([sessionId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String?
  sessionId String?
  type      String   // 'quiz' or 'article'
  itemId    String   // quiz slug or article id
  title     String   // display title
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId, type])
  @@index([sessionId, type])
  @@index([type, itemId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String?
  sessionId String?
  type      String   // 'quiz' or 'article'
  itemId    String   // quiz slug or article id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId, type])
  @@index([sessionId, type])
  @@index([type, itemId])
  @@unique([userId, type, itemId], name: "unique_user_like")
  @@unique([sessionId, type, itemId], name: "unique_session_like")
}

model Subscription {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan                    String   @default("premium") // 'premium'
  status                  String   @default("active") // 'active', 'cancelled', 'expired', 'past_due'
  stripeCustomerId        String?  @unique
  stripeSubscriptionId    String?  @unique
  stripePriceId           String?
  startDate               DateTime @default(now())
  endDate                 DateTime
  cancelAtPeriodEnd       Boolean  @default(false)
  canceledAt              DateTime?
  
  // Usage tracking
  premiumArticlesUsed     Int      @default(0)
  premiumArticlesLimit    Int      @default(3)
  freeQuizzesUsed         Int      @default(0)
  freeQuizzesLimit        Int      @default(2)
  freeQuizValueCap        Float    @default(50)
  discountedQuizzesUsed   Int      @default(0)
  discountedQuizzesLimit  Int      @default(3)
  
  // Cycle tracking
  lastCycleReset          DateTime @default(now())
  currentPeriodStart      DateTime @default(now())
  currentPeriodEnd        DateTime
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  @@index([userId, status])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
}

model Purchase {
  id              String   @id @default(cuid())
  userId          String?
  sessionId       String?
  type            String   // 'quiz' or 'article'
  itemId          String   // quiz slug or article id
  itemTitle       String
  basePrice       Float
  pricePaid       Float
  discountApplied Float    @default(0)
  paymentMethod   String?  // 'stripe', 'subscription', 'free'
  stripePaymentId String?
  metadata        String?  // JSON metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId, type])
  @@index([sessionId, type])
  @@index([type, itemId])
  @@index([createdAt(sort: Desc)])
}

model ManualDiscount {
  id              String   @id @default(cuid())
  code            String   @unique
  description     String
  discountPercent Float
  itemType        String   // 'quiz' or 'article'
  itemId          String?  // Specific item ID or null for category-wide
  validFrom       DateTime
  validUntil      DateTime
  maxUses         Int
  currentUses     Int      @default(0)
  isActive        Boolean  @default(true)
  createdBy       String?  // Admin user ID
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([code, isActive])
  @@index([itemType, itemId])
}

model AIConversation {
  id              String   @id @default(cuid())
  userId          String?
  sessionId       String?
  mode            String   // 'quiz-results', 'subscription', 'general'
  contextType     String?  // 'quiz-results', 'article', etc.
  contextId       String?  // quiz slug, article id, etc.
  messages        AIMessage[]
  metadata        String?  // JSON metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId, createdAt(sort: Desc)])
  @@index([sessionId, createdAt(sort: Desc)])
  @@index([contextType, contextId])
}

model AIMessage {
  id              String   @id @default(cuid())
  conversationId  String
  conversation    AIConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  role            String   // 'user' or 'assistant'
  content         String
  metadata        String?  // JSON metadata (tokens, model, etc.)
  createdAt       DateTime @default(now())
  
  @@index([conversationId, createdAt])
}

model LongitudinalCheckin {
  id              String   @id @default(cuid())
  userId          String?
  sessionId       String?
  type            String   // 'daily', 'weekly', 'monthly'
  responses       String   // JSON responses
  mood            Int?     // 1-10 scale
  energy          Int?     // 1-10 scale
  context         String?  // JSON contextual factors
  insights        String?  // AI-generated insights
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId, type, createdAt(sort: Desc)])
  @@index([sessionId, type, createdAt(sort: Desc)])
}

model EmailLog {
  id              String   @id @default(cuid())
  userId          String?
  email           String
  type            String   // 'welcome', 'quiz_results', 'subscription', 'receipt', etc.
  subject         String
  status          String   @default("pending") // 'pending', 'sent', 'failed', 'bounced'
  provider        String?  // 'sendgrid', 'postmark', etc.
  providerId      String?  // External email ID
  metadata        String?  // JSON metadata
  sentAt          DateTime?
  openedAt        DateTime?
  clickedAt       DateTime?
  errorMessage    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId, type])
  @@index([email, createdAt(sort: Desc)])
  @@index([status])
}

model WebhookEvent {
  id              String   @id @default(cuid())
  provider        String   // 'stripe', 'sendgrid', etc.
  eventType       String
  eventId         String?  @unique
  payload         String   // JSON payload
  processed       Boolean  @default(false)
  processedAt     DateTime?
  errorMessage    String?
  retryCount      Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([provider, eventType])
  @@index([processed, createdAt])
}
