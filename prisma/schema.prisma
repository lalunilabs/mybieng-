generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  quizRuns  QuizRun[]
  bookmarks Bookmark[]
  likes     Like[]
  
  @@index([email])
}

model QuizRun {
  id        String        @id @default(cuid())
  sessionId String
  userId    String?
  user      User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  quizSlug  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  answers   QuizAnswer[]
  total     Int
  bandLabel String
  metadata  String?       // Store additional quiz metadata as JSON string
  completed Boolean       @default(false)

  @@index([sessionId, createdAt(sort: Desc)])
  @@index([quizSlug, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
}

model QuizAnswer {
  id        String   @id @default(cuid())
  runId     String
  run       QuizRun  @relation(fields: [runId], references: [id], onDelete: Cascade)
  question  String
  value     Int
  createdAt DateTime @default(now())
  
  @@index([runId])
}

model Newsletter {
  id          String   @id @default(cuid())
  email       String   @unique
  source      String?  // Where they signed up from
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  unsubscribedAt DateTime?
  
  @@index([email])
  @@index([active, createdAt(sort: Desc)])
}

model Feedback {
  id        String   @id @default(cuid())
  type      String   // 'bug', 'feature', 'general'
  message   String
  email     String?
  metadata  String?  // Browser info, page URL, etc. as JSON string
  status    String   @default("open") // 'open', 'in-progress', 'closed'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([type, status])
  @@index([createdAt(sort: Desc)])
}

model Analytics {
  id        String   @id @default(cuid())
  event     String   // Event name
  data      String?  // Event data as JSON string
  sessionId String?
  userId    String?
  createdAt DateTime @default(now())
  
  @@index([event, createdAt(sort: Desc)])
  @@index([sessionId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String?
  sessionId String?
  type      String   // 'quiz' or 'article'
  itemId    String   // quiz slug or article id
  title     String   // display title
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId, type])
  @@index([sessionId, type])
  @@index([type, itemId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String?
  sessionId String?
  type      String   // 'quiz' or 'article'
  itemId    String   // quiz slug or article id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId, type])
  @@index([sessionId, type])
  @@index([type, itemId])
  @@unique([userId, type, itemId], name: "unique_user_like")
  @@unique([sessionId, type, itemId], name: "unique_session_like")
}
