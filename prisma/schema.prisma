generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  image        String?
  role         String        @default("user")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  quizRuns     QuizRun[]
  bookmarks    Bookmark[]
  likes        Like[]
  subscription Subscription?
  
  @@index([email])
}

model QuizRun {
  id        String        @id @default(cuid())
  sessionId String
  userId    String?
  user      User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  quizSlug  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  answers   QuizAnswer[]
  total     Int
  bandLabel String
  metadata  String?       // Store additional quiz metadata as JSON string
  completed Boolean       @default(false)

  @@index([sessionId, createdAt(sort: Desc)])
  @@index([quizSlug, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
}

model QuizAnswer {
  id        String   @id @default(cuid())
  runId     String
  run       QuizRun  @relation(fields: [runId], references: [id], onDelete: Cascade)
  question  String
  value     Int
  createdAt DateTime @default(now())
  
  @@index([runId])
}

model Newsletter {
  id            String   @id @default(cuid())
  email         String   @unique
  firstName     String?
  lastName      String?
  preferences   String?  // JSON preferences
  source        String?  // Where they signed up from
  leadMagnet    String?  // Which lead magnet they signed up for
  isActive      Boolean  @default(true)
  confirmedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  unsubscribedAt DateTime?
  
  @@index([email])
  @@index([isActive, createdAt(sort: Desc)])
}

model Feedback {
  id        String   @id @default(cuid())
  type      String   // 'bug', 'feature', 'general'
  message   String
  email     String?
  metadata  String?  // Browser info, page URL, etc. as JSON string
  status    String   @default("open") // 'open', 'in-progress', 'closed'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([type, status])
  @@index([createdAt(sort: Desc)])
}

model Analytics {
  id        String   @id @default(cuid())
  event     String   // Event name
  data      String?  // Event data as JSON string
  sessionId String?
  userId    String?
  createdAt DateTime @default(now())
  
  @@index([event, createdAt(sort: Desc)])
  @@index([sessionId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String?
  sessionId String?
  type      String   // 'quiz' or 'article'
  itemId    String   // quiz slug or article id
  title     String   // display title
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId, type])
  @@index([sessionId, type])
  @@index([type, itemId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String?
  sessionId String?
  type      String   // 'quiz' or 'article'
  itemId    String   // quiz slug or article id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId, type])
  @@index([sessionId, type])
  @@index([type, itemId])
  @@unique([userId, type, itemId], name: "unique_user_like")
  @@unique([sessionId, type, itemId], name: "unique_session_like")
}

model Subscription {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan                    String   @default("premium") // 'premium'
  status                  String   @default("active") // 'active', 'cancelled', 'expired', 'past_due'
  stripeCustomerId        String?  @unique
  stripeSubscriptionId    String?  @unique
  stripePriceId           String?
  startDate               DateTime @default(now())
  endDate                 DateTime
  cancelAtPeriodEnd       Boolean  @default(false)
  canceledAt              DateTime?
  
  // Usage tracking
  premiumArticlesUsed     Int      @default(0)
  premiumArticlesLimit    Int      @default(3)
  freeQuizzesUsed         Int      @default(0)
  freeQuizzesLimit        Int      @default(2)
  freeQuizValueCap        Float    @default(50)
  discountedQuizzesUsed   Int      @default(0)
  discountedQuizzesLimit  Int      @default(3)
  
  // Cycle tracking
  lastCycleReset          DateTime @default(now())
  currentPeriodStart      DateTime @default(now())
  currentPeriodEnd        DateTime
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  @@index([userId, status])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
}

model Purchase {
  id              String   @id @default(cuid())
  userId          String?
  sessionId       String?
  type            String   // 'quiz' or 'article'
  itemId          String   // quiz slug or article id
  itemTitle       String
  basePrice       Float
  pricePaid       Float
  discountApplied Float    @default(0)
  paymentMethod   String?  // 'stripe', 'subscription', 'free'
  stripePaymentId String?
  metadata        String?  // JSON metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId, type])
  @@index([sessionId, type])
  @@index([type, itemId])
  @@index([createdAt(sort: Desc)])
}

model ManualDiscount {
  id              String   @id @default(cuid())
  code            String   @unique
  description     String
  discountPercent Float
  itemType        String   // 'quiz' or 'article'
  itemId          String?  // Specific item ID or null for category-wide
  validFrom       DateTime
  validUntil      DateTime
  maxUses         Int
  currentUses     Int      @default(0)
  isActive        Boolean  @default(true)
  createdBy       String?  // Admin user ID
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([code, isActive])
  @@index([itemType, itemId])
}

model AIConversation {
  id              String   @id @default(cuid())
  userId          String?
  sessionId       String?
  mode            String   // 'quiz-results', 'subscription', 'general'
  contextType     String?  // 'quiz-results', 'article', etc.
  contextId       String?  // quiz slug, article id, etc.
  messages        AIMessage[]
  metadata        String?  // JSON metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId, createdAt(sort: Desc)])
  @@index([sessionId, createdAt(sort: Desc)])
  @@index([contextType, contextId])
}

model AIMessage {
  id              String   @id @default(cuid())
  conversationId  String
  conversation    AIConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  role            String   // 'user' or 'assistant'
  content         String
  metadata        String?  // JSON metadata (tokens, model, etc.)
  createdAt       DateTime @default(now())
  
  @@index([conversationId, createdAt])
}

model LongitudinalCheckin {
  id              String   @id @default(cuid())
  userId          String?
  sessionId       String?
  type            String   // 'daily', 'weekly', 'monthly'
  responses       String   // JSON responses
  mood            Int?     // 1-10 scale
  energy          Int?     // 1-10 scale
  context         String?  // JSON contextual factors
  insights        String?  // AI-generated insights
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId, type, createdAt(sort: Desc)])
  @@index([sessionId, type, createdAt(sort: Desc)])
}

model EmailLog {
  id              String   @id @default(cuid())
  userId          String?
  email           String
  type            String   // 'welcome', 'quiz_results', 'subscription', 'receipt', etc.
  subject         String
  status          String   @default("pending") // 'pending', 'sent', 'failed', 'bounced'
  provider        String?  // 'sendgrid', 'postmark', etc.
  providerId      String?  // External email ID
  metadata        String?  // JSON metadata
  sentAt          DateTime?
  openedAt        DateTime?
  clickedAt       DateTime?
  errorMessage    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId, type])
  @@index([email, createdAt(sort: Desc)])
  @@index([status])
}

model WebhookEvent {
  id              String   @id @default(cuid())
  provider        String   // 'stripe', 'sendgrid', etc.
  eventType       String
  eventId         String?  @unique
  payload         String   // JSON payload
  processed       Boolean  @default(false)
  processedAt     DateTime?
  errorMessage    String?
  retryCount      Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([provider, eventType])
  @@index([processed, createdAt])
}
