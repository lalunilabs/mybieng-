"use strict";(()=>{var e={};e.id=3069,e.ids=[3069],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},95923:(e,n,a)=>{a.r(n),a.d(n,{originalPathname:()=>m,patchFetch:()=>f,requestAsyncStorage:()=>l,routeModule:()=>d,serverHooks:()=>p,staticGenerationAsyncStorage:()=>y});var t={};a.r(t),a.d(t,{POST:()=>u});var s=a(49303),r=a(88716),c=a(60670),i=a(9487),o=a(87070);async function u(e){try{let{type:n,itemId:a}=await e.json(),t=await (0,i.s)(()=>i._.like.count({where:{type:n,itemId:a}}),0);return o.NextResponse.json({count:t})}catch(e){return console.error("Error fetching like count:",e),o.NextResponse.json({count:0})}}let d=new s.AppRouteRouteModule({definition:{kind:r.x.APP_ROUTE,page:"/api/likes/count/route",pathname:"/api/likes/count",filename:"route",bundlePath:"app/api/likes/count/route"},resolvedPagePath:"/Users/niharikasai/mybeing/app/api/likes/count/route.ts",nextConfigOutput:"standalone",userland:t}),{requestAsyncStorage:l,staticGenerationAsyncStorage:y,serverHooks:p}=d,m="/api/likes/count/route";function f(){return(0,c.patchFetch)({serverHooks:p,staticGenerationAsyncStorage:y})}},9487:(e,n,a)=>{a.d(n,{_:()=>r,s:()=>c});var t=a(53524);let s=()=>({user:{findMany:async()=>[],findUnique:async()=>null,create:async e=>({id:"mock-user",...e}),count:async()=>0},quizRun:{findMany:async()=>[],findUnique:async()=>null,create:async e=>({id:"mock-run",...e}),count:async()=>0,update:async()=>({}),updateMany:async()=>({})},quizAnswer:{findMany:async()=>[],create:async e=>({id:"mock-answer",...e}),createMany:async()=>({count:0})},subscription:{findUnique:async()=>null,findFirst:async()=>null,findMany:async()=>[],create:async({data:e})=>({id:"mock-sub",...e}),update:async({data:e})=>({id:"mock-sub",...e}),upsert:async({create:e,update:n})=>({id:"mock-sub",...n||e}),delete:async()=>({})},manualDiscount:{findFirst:async()=>null,update:async({data:e})=>({id:"mock-discount",...e}),create:async({data:e})=>({id:"mock-discount",...e})},purchase:{findFirst:async()=>null,findMany:async()=>[],create:async({data:e})=>({id:"mock-purchase",...e}),count:async()=>0},emailLog:{create:async({data:e})=>({id:"mock-email",status:e?.status||"sent",...e}),update:async({where:e,data:n})=>({id:e?.id||"mock-email",...n}),findMany:async()=>[]},newsletter:{create:async e=>({id:"mock-subscriber",...e}),count:async()=>0},$connect:async()=>{},$disconnect:async()=>{},$transaction:async e=>e(void 0)}),r=globalThis.prisma??function(){if(!process.env.DATABASE_URL)return console.warn("No DATABASE_URL found - using mock client"),s();try{return new t.PrismaClient({log:["error"],datasources:{db:{url:process.env.DATABASE_URL}}})}catch(e){return console.error("Failed to create Prisma client:",e),s()}}();async function c(e,n){if(!r)return console.warn("Database not available - returning fallback value"),n;try{return await e()}catch(e){return console.error("Database operation failed:",e),n}}}};var n=require("../../../../webpack-runtime.js");n.C(e);var a=e=>n(n.s=e),t=n.X(0,[8948,5972],()=>a(95923));module.exports=t})();